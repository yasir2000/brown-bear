user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;

    keepalive_timeout  65;

    server {
            listen       443 ssl http2;
            listen       [::]:443 ssl http2;
            server_name  tuleap-web.tuleap-aio-dev.docker;

            ssl_certificate /etc/pki/tls/certs/localhost.cert.pem;
            ssl_certificate_key /etc/pki/tls/private/localhost.key.pem;
            ssl_session_timeout 1d;
            ssl_session_cache shared:MozSSL:10m;
            ssl_session_tickets off;

            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
            ssl_prefer_server_ciphers off;

            client_max_body_size 0;
            proxy_request_buffering off;
            proxy_buffering off;

            location / {
                proxy_pass https://web:443;
                proxy_set_header X-Real-IP         $remote_addr;
                proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host              $host;
                proxy_set_header Destination       $http_destination;
            }

            location /socket.io {
                proxy_pass https://realtime:443;
                proxy_set_header X-Real-IP         $remote_addr;
                proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host              $host;
                # Mandatory for WS proxying https://www.nginx.com/blog/websocket-nginx/
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "Upgrade";
            }

            # Based on https://www.jenkins.io/doc/book/system-administration/reverse-proxy-configuration-nginx/
            # and https://stackoverflow.com/questions/32845674/setup-nginx-not-to-crash-if-host-in-upstream-is-not-found
            # to allow /jenkins to be there without jenkins actually be up at reverse proxy start.
            location /jenkins {
                resolver 127.0.0.11 valid=30s;
                set $upstream_jenkins jenkins;

                proxy_pass http://$upstream_jenkins:8080;

                sendfile off;
                #proxy_redirect     default;
                proxy_http_version 1.1;

                # Required for Jenkins websocket agents
                proxy_set_header   Connection        "Upgrade";
                proxy_set_header   Upgrade           $http_upgrade;

                proxy_set_header   Host              $host;
                proxy_set_header   X-Real-IP         $remote_addr;
                proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
                proxy_set_header   X-Forwarded-Proto $scheme;
                proxy_max_temp_file_size 0;

                #this is the maximum upload size
                client_max_body_size       10m;
                client_body_buffer_size    128k;

                proxy_connect_timeout      90;
                proxy_send_timeout         90;
                proxy_read_timeout         90;
                proxy_buffering            off;
                proxy_request_buffering    off; # Required for HTTP CLI commands
                proxy_set_header Connection ""; # Clear for keepalive
            }
    }

    server {
        listen       80;
        listen       [::]:80;
        server_name  tuleap-web.tuleap-aio-dev.docker;

        location / {
          return 301 https://$server_name:443$request_uri;
        }
    }
}

stream {
    server {
        listen 22;
        proxy_pass web:22;
    }
}
