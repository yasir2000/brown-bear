#!/usr/bin/env groovy

def actions

pipeline {
    agent {
        label 'docker'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Prepare') {
            agent {
                dockerfile {
                    dir 'sources/tools/utils/nix/'
                    filename 'build-tools.dockerfile'
                    reuseNode true
                    args '--tmpfs /tmp/tuleap_build:rw,noexec,nosuid --read-only'
                }
            }
            steps {
                dir ('results') {
                    deleteDir()
                }
                dir ('sources') {
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'nexus.enalean.com_readonly',
                            passwordVariable: 'NPM_PASSWORD',
                            usernameVariable: 'NPM_USER'
                        ),
                        string(credentialsId: 'github-token-composer', variable: 'COMPOSER_GITHUB_AUTH')
                    ]) {
                        sh 'tools/utils/scripts/generated-files-builder.sh dev'
                    }
                }
                script { actions = load 'sources/tests/actions.groovy' }
            }
        }

        stage('Unit tests PHP with coverage') {
            steps { script { actions.runPHPUnitTests('80', true) } }
            post { always { junit 'results/ut-phpunit/*/phpunit_tests_results.xml' } }
        }

        stage ('Unit tests JS/TS with coverage') {
            agent {
                dockerfile {
                    dir 'sources/tools/utils/nix/'
                    filename 'build-tools.dockerfile'
                    reuseNode true
                    args '--network none --tmpfs /tmp/jest_cache:rw,noexec,nosuid -e TMPDIR=/tmp/jest_cache/'
                }
            }
            steps { script { actions.runJestTests('Tuleap', '.', true) } }
            post {
                always {
                    junit 'results/jest/junit-*.xml'
                    publishCoverage adapters: [istanbulCoberturaAdapter(path: 'results/jest/coverage/*/cobertura-coverage.xml', mergeToOneReport: true)], tag: 'Javascript'
                }
            }
        }

        stage('Tests') {
            failFast false
            parallel {
                stage('E2E tests') {
                    options { retry(1) }
                    steps {
                        script { actions.runEndToEndTests('full', 'mysql57') }
                        junit 'results/e2e/full/*.xml'
                    }
                }
                stage('Distributed SVN integration') {
                    options { retry(1) }
                    steps {
                        script { actions.runEndToEndTests('distlp', 'mysql57') }
                        junit 'results/e2e/distlp/*.xml'
                    }
                }
                stage ('MariaDB 10.3') {
                    stages {
                        stage('REST CentOS 7 PHP 8.0 MariaDB 10.3') {
                            steps { script { actions.runRESTTests('mariadb103', '80') } }
                            post { always { junit 'results/api-rest/*/rest_tests.xml' } }
                        }
                        stage('DB CentOS 7 PHP 8.0 MariaDB 10.3') {
                            steps { script { actions.runDBTests('mariadb103', '80') } }
                            post { always { junit 'results/db/*/db_tests.xml' } }
                        }
                        stage('SOAP CentOS 7 PHP 8.0 MariaDB 10.3') {
                            steps { script { actions.runSOAPTests('mariadb103', '80') } }
                            post { always { junit 'results/soap/*/soap_tests.xml' } }
                        }
                    }
                }
                stage ('MySQL 8.0') {
                    stages {
                        stage('REST CentOS 7 PHP 8.0 MySQL 8.0') {
                            steps { script { actions.runRESTTests('mysql80', '80') } }
                            post { always { junit 'results/api-rest/*/rest_tests.xml' } }
                        }
                        stage('DB CentOS 7 PHP 8.0 MySQL 8.0') {
                            steps { script { actions.runDBTests('mysql80', '80') } }
                            post { always { junit 'results/db/*/db_tests.xml' } }
                        }
                        stage('SOAP CentOS 7 PHP 8.0 MySQL 8.0') {
                            steps { script { actions.runSOAPTests('mysql80', '80') } }
                            post { always { junit 'results/soap/*/soap_tests.xml' } }
                        }
                    }
                }
            }
        }
        stage('Psalm static analysis (unused code)') {
            agent {
                docker {
                    image 'ghcr.io/enalean/tuleap-test-phpunit:c7-php80'
                    reuseNode true
                    args '--network none'
                }
            }
            steps {
                script {
                    actions.runPsalmUnusedCodeDetection('tests/psalm/psalm.xml', '.')
                }
            }
            post {
                always {
                    recordIssues enabledForFailure: true, minimumSeverity: 'NORMAL', tools: [checkStyle(id: 'checkstyle_psalm', pattern: 'results/psalm/checkstyle.xml')]
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'results/'
        }
        failure {
            withCredentials([string(credentialsId: 'email-notification-rd-team', variable: 'email')]) {
                mail to: email,
                subject: "${currentBuild.fullDisplayName} is broken",
                body: "See ${env.BUILD_URL}"
            }
        }
        unstable {
            withCredentials([string(credentialsId: 'email-notification-rd-team', variable: 'email')]) {
                mail to: email,
                subject: "${currentBuild.fullDisplayName} is unstable",
                body: "See ${env.BUILD_URL}"
            }
        }
    }
}
